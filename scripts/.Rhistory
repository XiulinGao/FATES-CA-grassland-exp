cat0("   - ",h_desc,".")
now_soi           = as_tibble(hlm2d[[s]])
now_soi$time      = rep(each_tstamp, time=ninst)
now_soi$case      = rep_along(time, x=case_name)
now_soi$ens_label = rep(ens_labels, each=ntstamp_each)
now_melt     = as_tibble(reshape2::melt(data=now_soi,id.vars=c("case", "ens_label"
,"time"),variable.name="soi",value.name=h_vnam))
if (is.null(soi_melt)){
soi_melt = now_melt
}else{
soi_melt = merge(x=soi_melt,y=now_melt,by=c("case", "ens_label","time","soi"),all=TRUE)
}#end if (is.null(scls.melt))
}#end for (s in sequence(nsoi))
bysoi = soi_melt
rm(soi_melt)
cat0(" + Convert classes to integers.")
byage$age = as.integer(byage$age)
bydbh$dbh = as.integer(bydbh$dbh)
bypft$pft = as.integer(bypft$pft)
dphen$pft = as.integer(dphen$pft)
bysoi$soi = as.integer(bysoi$soi)
## write out tables so can use later
fwrite(byage,file.path(main_path,paste0(case_name,"_byage.csv")))
fwrite(bypft,file.path(main_path,paste0(case_name,"_bypft.csv")))
fwrite(dphen,file.path(main_path,paste0(case_name,"_dphen.csv")))
fwrite(bysoi,file.path(main_path,paste0(case_name,"_bysoi.csv")))
fwrite(hlm1d,file.path(main_path,paste0(case_name,"_hlm1d.csv")))
cvt_var = hlm1dvar$vnam[hlm1dvar$unit=="mmomo"]
var     = names(hlm1d)[names(hlm1d)%in%cvt_var]
hlm1d   = hlm1d                                          %>%
mutate( time     = rep(each_tstamp,time=ninst)
,cmon.day = days_in_month(time)
,cmon.sec = day.sec * cmon.day)
hlm1d =  hlm1d  %>%
mutate_at(vars(var), function(x) x*hlm1d$cmon.sec)
nc_conn              = nc_open(param_file)
param_config         = fread(trait_file)
param_config$pft_var = is.finite(param_config$pft)
param_config$org_var = is.finite(param_config$org)
param_config$pft_all = param_config$pft_var & (param_config$pft=="0")
param_config$org_all = param_config$org_var & (param_config$org=="0")
#as the first set of ensembles do not change fire-related parameters, we exclude these
p_vlist       = param_config$parameter[!grepl(pattern="fire",param_config$parameter)]
np            = length(p_vlist)
nc_nvars = nc_conn$nvars
nc_ndims = nc_conn$ndims
nc_dlist = rep(NA_character_,times=nc_ndims)
nc_vlist = rep(NA_character_,times=nc_nvars)
for (d in sequence(nc_ndims)) nc_dlist[d] = names(nc_conn$dim)[[d]]
for (v in sequence(nc_nvars)) nc_vlist[v] = names(nc_conn$var)[[v]]
#ideally, we want a parameter table with both pft and organ dimension info in case
#parameter changed for different PFTs (not the case here) or organs
# to do this, a list storing all values for each parameter (naming them along with pft and org index)
# would be the best.
param_lst=list()
for (p in sequence(np)){
nc_nvnow            = p_vlist[p]
h                   = match(nc_nvnow,param_config$parameter)
is_pft              = param_config$pft_var[h]
is_org              = param_config$org_var[h]
all_pft             = param_config$pft_all[h]
all_org             = param_config$org_all[h]
p_pft               = param_config$pft[h]
p_org               = param_config$org[h]
p_value             = ncvar_get(nc=nc_conn,varid=nc_nvnow)
#---~---
# seek for pft or/and organ index, update indices and var names
if (is_pft) p_pft_idx = if(all_pft){sequence(npfts)}else{p_pft  }
if (is_org & !is_pft) p_org_idx = if(all_org){sequence(dim(p_value)[1])}else{p_org}
if (is_org) p_org_idx = if(all_org){sequence(dim(p_value)[2])}else{p_org}
if (is_org & is_pft){
p_prefix  = paste0("p",p_pft_idx[1])
o_prefix  = paste0("o",p_org_idx[1])
prefix    = paste0(p_prefix,"_",o_prefix,"_")
p_name    = paste0(prefix,nc_nvnow)
if(npfts>1){param_tbl[[p_name]] = p_value[p_pft_idx,p_org_idx,]}else{
param_lst[[p]] = setNames(as_tibble(p_value[p_org_idx,]),p_name)
}
}else if (is_org){
o_prefix  = sprintf("o%i",p_org_idx)
p_name    = paste0(o_prefix,"_",nc_nvnow)
param_lst[[p]] = setNames(as_tibble(p_value[p_org_idx,]),p_name)
}else if (is_pft){
p_prefix  = sprintf("p%i",p_pft_idx)
p_name    = paste0(p_prefix,"_",nc_nvnow)
if(npfts>1){param_tbl[[p_name]] = p_value[p_pft_idx, ]}else{
param_lst[[p]] = setNames(as_tibble(p_value),p_name)
}
}else{
param_lst[[p]] = setNames(as_tibble(p_value),p_name)
}
}
param_tbl            = do.call(cbind,param_lst)
param_tbl$ens_label = ens_labels
# close connection
dummy=nc_close(nc_conn)
cat0(" + Load site data from ",obs_main,".")
nc_site  = nc_open(filename=flux_path)
nc_nvars = nc_site$nvars
nc_ndims = nc_site$ndims
nc_dlist = rep(NA_character_,times=nc_ndims)
nc_vlist = rep(NA_character_,times=nc_nvars)
for (d in sequence(nc_ndims)) nc_dlist[d] = nc_site$dim[[d]]$name
for (v in sequence(nc_nvars)) nc_vlist[v] = nc_site$var[[v]]$name
# Select variables to load
nc_obs1d    = nc_vlist[tolower(nc_vlist) %in% hlm1dvar$vnam[hlm1dvar$assess]]
nc_obs2d    = nc_vlist[tolower(nc_vlist) %in% hlm2dsoi$vnam[hlm2dsoi$assess]]
nc_obs      = c(nc_obs1d, nc_obs2d)
# Extract time information
site_time0  = as_datetime(gsub(pattern="^days since ",replacement="",x=nc_site$dim$time$units))
site_time   = site_time0 + days(nc_site$dim$time$vals)
n_site_time = nc_site$dim$time$len
# Initialise a tibble that will host all data
site1d = tibble( time = site_time)
# Find conversion factors for monthly variables.
cmon.day = days_in_month(site1d$time)
cmon.hr  = day.hr  * cmon.day
cmon.min = day.min * cmon.day
cmon.sec = day.sec * cmon.day
# Loop through variables, and load data sets.
for (o in seq_along(nc_obs)){
nc_nvnow        = nc_obs[o]
if(nc_nvnow=="H2OSOI"){ #in hlm2dvar
h               = match(tolower(nc_nvnow),hlm2dsoi$vnam)
h_vnam          = hlm2dsoi$vnam[h]
h_desc          = hlm2dsoi$desc[h]
h_add0          = eval(parse(text=hlm2dsoi$add0[h]))
h_mult          = eval(parse(text=hlm2dsoi$mult[h]))
nc_dat          = ncvar_get(nc=nc_site,varid=nc_nvnow)
cat0("   - Retrieve ",h_desc,".")
site1d[[h_vnam]] = h_add0 + h_mult * nc_dat
}else{
h               = match(tolower(nc_nvnow),hlm1dvar$vnam)
h_vnam          = hlm1dvar$vnam[h]
h_desc          = hlm1dvar$desc[h]
h_add0          = eval(parse(text=hlm1dvar$add0[h]))
h_mult          = eval(parse(text=hlm1dvar$mult[h]))
nc_dat          = ncvar_get(nc=nc_site,varid=nc_nvnow)
cat0("   - Retrieve ",h_desc,".")
site1d[[h_vnam]] = h_add0 + h_mult * nc_dat
}
}#end for (o in seq_along(nc_obs))
# Close file and remove connection.
dummy = nc_close(nc_site)
rm(nc_site)
tstampa_com = max(c(min(each_tstamp),min(site1d$time)))
tstampz_com = min(c(max(each_tstamp),max(site1d$time)))
tstamp_com  = each_tstamp[(each_tstamp >= tstampa_com) & (each_tstamp <= tstampz_com)]
ntstamp_com = length(tstamp_com)
#join agb and lai
lai = fread(lai_path)
lai = lai %>% mutate(LAI_DATE = ymd(LAI_DATE),
year     = year(LAI_DATE),
month    = month(LAI_DATE)) %>% dplyr::select(-LAI_DATE)
colnames(lai) <- c("elai","elai_sd","year","month")
agb = fread(agb_path)
agb = agb %>% mutate(date = ymd(date),
year = year(date),
month= month(date)) %>% dplyr::select(-date)
colnames(agb) <- c("agb","agb_sd","sample","year","month")
agb           = agb %>% mutate(agb = agb/2)
site1d = site1d %>%
mutate(year=year(time),
month=month(time)) %>%
left_join(lai, by=c("year", "month")) %>%
left_join(agb,by=c("year", "month")) %>%
dplyr::select(!c(year, month))
# if agb during peak growing season (5,6,7)>= 0.1 kgC, we mark the ensemble as survived
# later we can calculate the (mean - sd) using site obs as threshold
growing_sea = c("3","4","5")
survi_ens = bypft                                                   %>%
mutate(month = month(time))                             %>%
group_by(case,ens_label,month)                          %>%
summarize(fates_gpp                   = mean(fates_gpp)
,fates_vegc_aboveground      = mean(fates_vegc_aboveground)
,fates_lai                   = mean(fates_lai))
survi_ens   = survi_ens   %>%
mutate(survi = (month %in% growing_sea & fates_vegc_aboveground >= 0.1))
survi_label = unique(survi_ens$ens_label[survi_ens$survi])
mortout    = names(bypft)[grep(pattern="mortality",x=names(bypft))]
find_mort = function(x,n){
mort_mon = ifelse( test = n == 0, yes = 0., no = pmin(1.,x/n/12.))
mort_year = 100. * (1. - (1. - mort_mon)^12)
return(mort_year)
}#end function find_mort
survi_ens  = bypft                               %>%
filter(ens_label %in% survi_label)  %>%
mutate(month = month(time)
,year  = year(time))          %>%
mutate_at(all_of(mortout),~ find_mort(x=.x,n=.data$fates_nplant))
param_tbl   = param_tbl %>%
mutate(survi_mark = case_when(
ens_label %in% survi_label ~ "Survived",
!ens_label %in% survi_label ~ "Dided"
))
survi_mmean = survi_ens                                                %>%
group_by(case,ens_label,pft,month)                       %>%
summarize( fates_ddbh_canopy            = mean(fates_ddbh_canopy)
, fates_ddbh_ustory            = mean(fates_ddbh_ustory)
, fates_gpp                    = mean(fates_gpp)
, fates_lai_canopy             = mean(fates_lai_canopy)
, fates_lai_ustory             = mean(fates_lai_ustory)
, fates_mortality_background   = mean(fates_mortality_background)
, fates_mortality_cstarv       = mean(fates_mortality_cstarv)
, fates_mortality_hydraulic    = mean(fates_mortality_hydraulic)
, fates_mortality_termination  = mean(fates_mortality_termination)
, fates_mortality_canopy       = mean(fates_mortality_canopy)
, fates_mortality_ustory       = mean(fates_mortality_ustory)
, fates_npp                    = mean(fates_npp)
, fates_vegc_aboveground       = mean(fates_vegc_aboveground)
, fates_lai                    = mean(fates_lai))  %>%
ungroup()
survi_amean = survi_ens                                                %>%
group_by(case,ens_label,pft,year)                        %>%
summarize(fates_ddbh_canopy           = mean(fates_ddbh_canopy)
,fates_ddbh_ustory           = mean(fates_ddbh_ustory)
,fates_gpp                   = mean(fates_gpp)
,fates_lai_canopy            = mean(fates_lai_canopy)
,fates_lai_ustory            = mean(fates_lai_ustory)
,fates_vegc_aboveground      = mean(fates_vegc_aboveground)
,fates_lai                   = mean(fates_lai))  %>%
ungroup()
survi_num  = length(survi_label)
survi_frac = survi_num/ninst
cat (survi_num, "ensembles survied; survied fraction is",survi_frac, sep=" ")
### remove the upper corr plots for ggpairs, as we don't have trait
### correlation in our experiment except for 3 of them
cat0("Pair plot for parameters of survied ensembles ")
param_survi = param_tbl %>% filter(survi_mark=="Survived")
plot_names = gsub(pattern="p1_fates_",replacement="",x=names(param_survi))
plot_names = gsub(pattern="p1_o1_fates_",replacement="",x=plot_names)
plot_names = gsub(pattern="o5_fates_",replacement="",x=plot_names)
plot_names = gsub(pattern="leaf_",replacement="",x=plot_names)
colnames(param_survi) <- plot_names
p <-   ggpairs(param_survi, columns = 1:21,
upper='blank',
lower=list(continuous = wrap("points",size=0.3))) +
theme_grey( base_size = gg_ptszl+10, base_family = "Helvetica",base_line_size = 0.5,
base_rect_size =0.5) +
theme(legend.position    = "bottom"
, legend.text=element_text(size=gg_ptszl)
, axis.text.x= element_text( size   = gg_ptszl
, margin     = unit(rep(0.35,times=4),"cm"))#end element_text
, axis.text.y= element_text( size   = gg_ptszl
, margin     = unit(rep(0.35,times=4),"cm")
)#end element_text
, axis.ticks.length= unit(-0.25,"cm")
, panel.grid.major = element_blank()
, panel.grid.minor = element_blank()
)
Hmisc::hist.data.frame(param_survi[c(1:2,4:21)])
cat0("Plot monthly mean distributions of each variable for survived ebsembles")
Hmisc::hist.data.frame(survi_mmean[7:18])
ggplot(survi_mmean, aes(fates_lai,fates_gpp)) +
geom_point() +
labs(y=expression("GPP ("~gC~m^-2~day^-1~")"),
x=expression("LAI ("~m^-2~m^-2~")"))+
theme_grey( base_size = gg_ptsz, base_family = "Helvetica",base_line_size = 0.5,
base_rect_size =0.5) +
theme(legend.position    = "right"
, legend.text=element_text(size=gg_ptsz)
, axis.text.x= element_text( size   = gg_ptsz
, margin     = unit(rep(0.35,times=4),"cm"))#end element_text
, axis.text.y= element_text( size   = gg_ptsz
, margin     = unit(rep(0.35,times=4),"cm")
)#end element_text
, axis.ticks.length= unit(-0.25,"cm")
, panel.grid.major = element_blank()
, panel.grid.minor = element_blank()
)
ggsave(filename="lai-gpp.png",path=plot_main,width=gg_widthn,height=gg_widthn*0.8,unit="cm",dpi=gg_depth)
#convert npp (kgC.m-2.yr-1) to gC.m-2.day-1
plot_df = survi_ens %>% dplyr::select(fates_gpp,fates_npp,ens_label,month) %>%
mutate(cue       = fates_npp/fates_gpp)
plot_df = plot_df %>% group_by(ens_label,month) %>%
summarise_all(mean) %>% ungroup()
cat0("+ Plot carbon use efficiency")
ggplot(plot_df, aes(fates_gpp,fates_npp)) +
geom_point() +
labs(x=expression("GPP ("~gC~m^-2~day^-1~")"),
y=expression("NPP ("~gC~m^-2~day^-1~")"))+
geom_abline(slope = 1, intercept = 0,color="red")+
theme_grey( base_size = gg_ptsz, base_family = "Helvetica",base_line_size = 0.5,
base_rect_size =0.5) +
theme(legend.position    = "right"
, legend.text=element_text(size=gg_ptsz)
, axis.text.x= element_text( size   = gg_ptsz
, margin     = unit(rep(0.35,times=4),"cm"))#end element_text
, axis.text.y= element_text( size   = gg_ptsz
, margin     = unit(rep(0.35,times=4),"cm")
)#end element_text
, axis.ticks.length= unit(-0.25,"cm")
, panel.grid.major = element_blank()
, panel.grid.minor = element_blank()
)
ggsave(filename="cue.png",path=plot_main,width=gg_widthn,height=gg_widthn*0.8,unit="cm",dpi=gg_depth)
hlm_var   = c("fates_gpp","fates_vegc_aboveground","fates_meanliqvol_droughtphen",
"eflx_lh_tot","elai","fsh")
hlm_scy   = hlm1d                                                                %>%
dplyr::select(all_of(c("case","ens_label","time",hlm_var)))          %>%
filter(ens_label %in% survi_label)
hlm_scy   = hlm_scy %>%
rename(gpp = fates_gpp
,agb = fates_vegc_aboveground
,h2osoi = fates_meanliqvol_droughtphen)
var_both = intersect(names(site1d),names(hlm_scy))
var_both = var_both[! var_both %in% "time"]
site1d  = site1d %>% dplyr::select( all_of(c("time",var_both)))
site1d$case = 0L
site1d$ens_label = "site"
hlm_scy$case = as.numeric(as.factor(hlm_scy$case))
cat0(" + Merge data sets into a single tibble.")
emean_com = rbind(hlm_scy,site1d) %>% rename(source=case)
mmean_com = emean_com                                                     %>%
mutate(month = month(time))                                       %>%
group_by(month,source,ens_label)                                  %>%
dplyr::select(-time)                                              %>%
summarise_all(mean, na.rm=TRUE)                                   %>%
ungroup()
mmean_com = mmean_com %>% arrange(source,month,ens_label)
cat0(" + Plot monthly mean of variables.")
leg_colours = c(site_colour,ens_colour)
leg_labels  = c("Site",case_name)
mmean_plot  = mmean_com %>%
rename(fates_gpp = gpp
,fates_vegc_aboveground = agb
,fates_meanliqvol_droughtphen = h2osoi)
emean_loop = which(hlm1dvar$vnam %in% hlm_var)
gg_emean   = list()
for (h in emean_loop){
h_vnam   = hlm1dvar$vnam[h]
h_desc   = hlm1dvar$desc [h]
h_short  = hlm1dvar$short[h]
h_unit   = hlm1dvar$unit [h]
h_legend = v == 1
cat0("   - ",h_desc,".")
mmean_now        = mmean_plot
mmean_now$source = factor(mmean_now$source,levels=unique(mmean_now$source))
gg_now = ggplot(data=mmean_now,aes_string(x="month",y=h_vnam,group="ens_label",colour="source"))
gg_now = gg_now + scale_colour_manual(name="",aesthetics="colour",labels=leg_labels,values=leg_colours)
gg_now = gg_now + geom_line(lwd=0.3,show.legend = TRUE)
gg_now = gg_now + labs(title=h_desc)
gg_now = gg_now + scale_x_continuous( breaks = sequence(12))#end scale_x_continuous
gg_now = gg_now + xlab(element_blank())
gg_now = gg_now + ylab(desc.unit(desc=h_short,unit=untab[[h_unit]],dxpr=TRUE))
gg_now = gg_now + theme_grey( base_size = gg_ptsz, base_family = "Helvetica",base_line_size= 0.5,base_rect_size =0.5)
gg_now = gg_now + theme( legend.position   = "right"
, legend.text=element_text(size=gg_ptsz)
,axis.text.x        = element_text( size   = gg_ptsz
, margin = unit(rep(0.35,times=4),"cm"))#end element_text
, axis.text.y       = element_text( size   = gg_ptsz
, margin = unit(rep(0.35,times=4),"cm")
)#end element_text
, axis.ticks.length = unit(-0.25,"cm")
) #end theme
# Save plots.
for (d in sequence(ndevice)){
h_output = paste0(h_vnam, case_name,".",gg_device[d])
dummy    = ggsave( filename = h_output
, plot     = gg_now
, device   = gg_device[d]
, path     = secy_path
, width    = gg_width
, height   = gg_height
, units    = gg_units
, dpi      = gg_depth
)
}
gg_emean[[h_vnam]] = gg_now
}
# If sought, plot images on screen
if (gg_screen) gg_emean
## only for survived ens
survi_peak = survi_mmean                    %>%
filter(month==4)
survi_all  = survi_peak                     %>%
left_join(param_survi,by="ens_label")
cor_leafdf   = survi_all[c(7,11:15, 17:21,23:33,36:39)]
nam = names(cor_leafdf)
nam = gsub("fates_",replacement="",x=nam)
colnames(cor_leafdf) <- nam
pairs(cor_leafdf) +
theme_grey( base_size = 40, base_family = "Helvetica",base_line_size= 0.5,base_rect_size =0.5) +
theme(legend.text=element_text(size=gg_ptszl)
,axis.text.x = element_text( size   = gg_ptszl
, margin = unit(rep(0.35,times=4),"cm"))#end element_text
, axis.text.y= element_text( size   = gg_ptszl
, margin = unit(rep(0.35,times=4),"cm")
)#end element_text
, axis.ticks.length = unit(-0.25,"cm")
)
cor_leaf     = cor(cor_leafdf)
corrplot::corrplot(cor_leaf
,method = "color"
,addCoef.col="grey"
,order = "AOE"
,number.cex=1.2
,tl.cex = 1.5)
# Select mortality type variables, ensure all of them are present.
mort_out       = names(bypft)[grepl(pattern="_mortality_",x=names(bypft))]
mortvar        = fatesvar[fatesvar$vtype %in% "mort",]
mortvar        = mortvar[order(mortvar$order),,drop=FALSE]
mortvar        = mortvar[mortvar$vnam %in% mort_out,]
mortvar$desc   = gsub(pattern="Mortality rate \\(",replacement="",x=mortvar$desc)
mortvar$desc   = gsub(pattern="\\)"               ,replacement="",x=mortvar$desc)
nmorts         = nrow(mortvar)
plot_mort_dbh  = all(c(mortvar$vnam,"fates_nplant") %in% names(bydbh))
plot_mort_pft  = all(c(mortvar$vnam,"fates_nplant") %in% names(bypft))
bypft_survi    = bypft %>% filter(ens_label %in% survi_label)
# Function to convert change rate into mortality rate, by accounting for the non-linearity across multiple time scales.
find_mort = function(x,n){
mort_mon = ifelse( test = n == 0, yes = 0., no = pmin(1.,x/n/12.))
mort_year = 100. * (1. - (1. - mort_mon)^12)
return(mort_year)
}#end function find_mort
# In case we are to plot mortality by type and PFT, reorganise mortality data.
if (plot_mort_pft){
# Re-order mortality so it becomes all in one tibble.
mortens = bypft_survi %>% mutate(fates_nplant = fates_nplant_canopy + fates_nplant_ustory) %>%
mutate_at(all_of(mortvar$vnam), ~ find_mort(x=.x,n=.data$fates_nplant)) %>%
select_at(all_of(c("case","ens_label","pft","time",mortvar$vnam))) %>%
pivot_longer(cols=mortvar$vnam,names_to="mtype",values_to="mortality") %>%
mutate( mtype = factor(mortvar$desc[match(mtype,mortvar$vnam)],levels=mortvar$desc )
, pft   = factor(pftinfo$parse[match(pft,pftinfo$id)]   ,levels=pftinfo$parse) )
ens_mark = unique(mortens$ens_label)[5:8] #chose 4 to plot
mortens_sub = mortens %>% filter(ens_label %in% ens_mark)
# Initialise plot (decide whether to plot lines or stacks).
gg_mpft = ggplot(data=mortens_sub,aes(x=time,y=mortality,group=mtype,fill=mtype))
gg_mpft = gg_mpft + facet_wrap(.~ ens_label, ncol = 2, labeller = label_parsed)
gg_mpft = gg_mpft + scale_fill_manual(name="Mortality type",labels=mortvar$desc,values=mortvar$colour)
gg_mpft = gg_mpft + geom_area(position=position_stack(reverse = FALSE),show.legend = TRUE)
gg_mpft = gg_mpft + labs(title=case_name)
gg_mpft = gg_mpft + scale_x_datetime(date_labels=gg_tfmt)
gg_mpft = gg_mpft + scale_y_continuous(trans="sqrt",n.breaks=10,labels=label_number_auto())
gg_mpft = gg_mpft + xlab("Simulation time")
gg_mpft = gg_mpft + ylab(desc.unit(desc="Mortality rate",unit=untab$pcoyr,twolines=TRUE))
gg_mpft = gg_mpft + theme_grey( base_size = gg_ptsz, base_family = "Helvetica",base_line_size = 0.5,base_rect_size =0.5)
gg_mpft = gg_mpft + theme( axis.text.x       = element_text( size   = gg_ptsz
, margin = unit(rep(0.35,times=4),"cm")
)#end element_text
, axis.text.y       = element_text( size   = gg_ptsz
, margin = unit(rep(0.35,times=4),"cm")
)#end element_text
, axis.ticks.length = unit(-0.25,"cm")
, legend.position   = "bottom"
, legend.direction  = "horizontal"
)#end theme
# Save plots.
for (d in sequence(ndevice)){
m_output = paste0("mort-bypft-",case_name,".",gg_device[d])
dummy    = ggsave( filename = m_output
, plot     = gg_mpft
, device   = gg_device[d]
, path     = tsmort_path
, width    = gg_width
, height   = gg_height
, units    = gg_units
, dpi      = gg_depth
)#end ggsave
}#end for (d in sequence(ndevice))
# If sought, plot images on screen
if (gg_screen) gg_mpft
}#end if (plot_mort_pft)
# In case we are to plot mortality by type and size(DBH), reorganise mortality data.
if (plot_mort_dbh){
# Re-order mortality so it becomes all in one tibble.
mortdbh = bydbh %>%
filter( dbh != 1) %>%
mutate_at(all_of(mortvar$vnam), ~ find_mort(x=.x,n=.data$nplant)) %>%
select_at(all_of(c("case","ens_label","time","dbh",mortvar$vnam))) %>%
pivot_longer(cols=mortvar$vnam,names_to="mtype",values_to="mortality") %>%
mutate( mtype = factor(mortvar$desc[match(mtype,mortvar$vnam)],levels=mortvar$desc    )
, dbh   = factor(dbhinfo$desc[match(dbh  ,dbhinfo$id  )],levels=dbhinfo$desc[-1]) )
# Initialise plot (decide whether to plot lines or stacks).
gg_mdbh = ggplot(data=mortdbh,aes(x=time,y=mortality,group=mtype,fill=mtype))
gg_mdbh = gg_mdbh + facet_wrap(.~ dbh, ncol = 4, labeller = label_parsed)
gg_mdbh = gg_mdbh + scale_fill_manual(name="Mortality type",labels=mortvar$desc,values=mortvar$colour)
gg_mdbh = gg_mdbh + geom_area(position=position_stack(reverse = FALSE),show.legend = TRUE)
gg_mdbh = gg_mdbh + labs(title=case_desc)
gg_mdbh = gg_mdbh + scale_x_datetime(date_labels=gg_tfmt)
gg_mdbh = gg_mdbh + scale_y_continuous(trans="sqrt",n.breaks=10,labels=label_number_auto())
gg_mdbh = gg_mdbh + xlab("Simulation time")
gg_mdbh = gg_mdbh + ylab(desc.unit(desc="Mortality rate",unit=untab$pcoyr,twolines=TRUE))
gg_mdbh = gg_mdbh + theme_grey( base_size = gg_ptsz, base_family = "Helvetica",base_line_size = 0.5,base_rect_size =0.5)
gg_mdbh = gg_mdbh + theme( axis.text.x       = element_text( size   = gg_ptsz
, margin = unit(rep(0.35,times=4),"cm")
)#end element_text
, axis.text.y       = element_text( size   = gg_ptsz
, margin = unit(rep(0.35,times=4),"cm")
)#end element_text
, plot.title        = element_text( size = gg_ptsz)
, axis.ticks.length = unit(-0.25,"cm")
, legend.position   = "bottom"
, legend.direction  = "horizontal"
)#end theme
# Save plots.
for (d in sequence(ndevice)){
m_output = paste0("mort-bydbh-",case_name,".",gg_device[d])
dummy    = ggsave( filename = m_output
, plot     = gg_mdbh
, device   = gg_device[d]
, path     = tsmort_path
, width    = gg_width*2
, height   = gg_height*2
, units    = gg_units
, dpi      = gg_depth
)#end ggsave
}#end for (d in sequence(ndevice))
# If sought, plot images on screen
if (gg_screen) gg_mdbh
}#end if (plot_mort_dbh)
gc()
